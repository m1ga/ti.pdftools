/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.pdftools;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;

import com.tom_roush.pdfbox.multipdf.PDFMergerUtility;
import com.tom_roush.pdfbox.pdmodel.PDDocument;
import com.tom_roush.pdfbox.pdmodel.PDPage;
import com.tom_roush.pdfbox.pdmodel.PDPageContentStream;
import com.tom_roush.pdfbox.pdmodel.common.PDRectangle;
import com.tom_roush.pdfbox.pdmodel.graphics.image.JPEGFactory;
import com.tom_roush.pdfbox.pdmodel.graphics.image.LosslessFactory;
import com.tom_roush.pdfbox.pdmodel.graphics.image.PDImageXObject;
import com.tom_roush.pdfbox.util.PDFBoxResourceLoader;
import java.io.IOException;
import java.io.InputStream;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiBlob;
import org.appcelerator.titanium.TiFileProxy;
import org.appcelerator.titanium.io.TiBaseFile;
import org.appcelerator.titanium.io.TiFileFactory;
import org.appcelerator.titanium.util.TiUrl;

@Kroll.module(name = "TiPdftools", id = "ti.pdftools")
public class TiPdftoolsModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "Ti.PDFTools";
	private static final boolean DBG = TiConfig.LOGD;

	public TiPdftoolsModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		PDFBoxResourceLoader.init(app);
	}

	// Methods
	@Kroll.method
	public TiBlob merge(Object obj)
	{
		PDFMergerUtility mergerUtility = new PDFMergerUtility();

		if (obj instanceof Object[]) {
			Object[] files = (Object[]) obj;

			for (int i = 0; i < files.length; ++i) {
				if (files[i] instanceof TiFileProxy) {
					TiBaseFile file = ((TiFileProxy) files[i]).getBaseFile();
					Log.d(LCAT, "File size: " + file.size());
					try {
						InputStream iostream = file.getInputStream();
						mergerUtility.addSource(iostream);
						iostream.close();
					} catch (IOException e) {
						Log.e(LCAT, "File error: " + e.getMessage());
					}
				} else if (files[i] instanceof String) {
					String url = TiUrl.resolve("", (String) files[i], null);
					TiBaseFile file = TiFileFactory.createTitaniumFile(new String[] { url }, false);
					Log.d(LCAT, "File size: " + file.size());
					try {
						InputStream iostream = file.getInputStream();
						mergerUtility.addSource(iostream);
						iostream.close();
					} catch (IOException e) {
						Log.e(LCAT, "File error: " + e.getMessage());
					}
				}
			}

			TiBaseFile outfile = TiFileFactory.createTitaniumFile(System.currentTimeMillis() + ".pdf", true);
			try {
				mergerUtility.setDestinationStream(outfile.getOutputStream());
				mergerUtility.mergeDocuments(true);
			} catch (IOException e) {
				Log.e(LCAT, e.getMessage());
			}

			if (outfile.size() > 0) {
				return TiBlob.blobFromFile(outfile);
			} else {
				return null;
			}
		}
		return null;
	}

	// Methods
	@Kroll.method
	public TiBlob imagesToPdf(Object obj)
	{
		PDFMergerUtility mergerUtility = new PDFMergerUtility();
		PDDocument document = new PDDocument();

		if (obj instanceof Object[]) {
			Object[] files = (Object[]) obj;


			for (int i = 0; i < files.length; ++i) {
				if (files[i] instanceof TiFileProxy) {
					TiBaseFile file = ((TiFileProxy) files[i]).getBaseFile();
					Log.d(LCAT, "File size: " + file.size());
					try {
						InputStream iostream = file.getInputStream();
						Bitmap bmp = BitmapFactory.decodeStream(iostream);
						float width = bmp.getWidth();
						float height = bmp.getHeight();

						PDPage page = new PDPage(new PDRectangle(width, height));
						document.addPage(page);

						PDImageXObject img = LosslessFactory.createFromImage(document, bmp);
						PDPageContentStream contentStream = new PDPageContentStream(document, page);
						contentStream.drawImage(img, 0, 0);
						contentStream.close();
						iostream.close();
					} catch (IOException e) {
						Log.e(LCAT, "File error: " + e.getMessage());
					}
				} else if (files[i] instanceof String) {
					String url = TiUrl.resolve("", (String) files[i], null);
					TiBaseFile file = TiFileFactory.createTitaniumFile(new String[] { url }, false);

					try {
						InputStream iostream = file.getInputStream();
						Bitmap bmp = BitmapFactory.decodeStream(iostream);
						float width = bmp.getWidth();
						float height = bmp.getHeight();

						PDPage page = new PDPage(new PDRectangle(width, height));
						document.addPage(page);

						PDImageXObject img = PDImageXObject.createFromFile(file.nativePath(), document);
						PDPageContentStream contentStream = new PDPageContentStream(document, page);
						contentStream.drawImage(img, 0, 0);
						contentStream.close();
						iostream.close();
					} catch (IOException e) {
						Log.e(LCAT, "File error: " + e.getMessage());
					}
				}
			}

			TiBaseFile outfile = TiFileFactory.createTitaniumFile(System.currentTimeMillis() + ".pdf", true);
			try {
				document.save(outfile.getNativeFile());
				document.close();
				if (outfile.size() > 0) {
					return TiBlob.blobFromFile(outfile);
				} else {
					return null;
				}
			} catch (IOException e) {

			}
		}
		try {
			document.close();
		} catch (IOException e) {

		}
		return null;
	}
}
